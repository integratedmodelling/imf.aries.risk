namespace aries.risk.indicator;

project private model es.risk:HeatHazardMetric
   observing landcover:LandSurface earth:AtmosphericTemperature  in Celsius named lst
       lookup (lst, ?) into 
	    lst             |	hazard   
---------------------------------------------------------------------
		< 20            |    0,           
		20 to 25        |    0.2,      
        25 to 30        |    0.4,       
		30 to 35        |    0.6,           
		35 to 40        |    0.8,      
        > 40            |    1 ; 

model es.risk:HeatExposureMetric     
  observing 
	im:Normalized count of demography:HumanIndividual named normalized_population
	set to [normalized_population];

model es.risk:HeatVulnerabilityMetric 
  observing 
    im:Normalized (im:Mean im:Height of infrastructure:Building) named normalized_height_of_building
    set to [normalized_height_of_building]; 
    
/*
 * Ordered Weighted Averages (OWA)-based composite risk indicator
 */
@parameter(label = 'Risk aversion', default=0.5, name = risk_profile)
@parameter(label = 'Risk neutral profile?', default=false, name = balanced_risk_prof)
@parameter(label = 'Ratio between median and extremes', default=1, name = ratio_balance)
project private model es.risk:HeatRiskMetric  
	observing 
	    @criterion(relweight ?= 1) es.risk:HeatHazardMetric,
	    @criterion(relweight ?= 1) es.risk:HeatExposureMetric,
	    @criterion(relweight ?= 1) es.risk:HeatVulnerabilityMetric   
    using im.mca.owa(interpolate_weights = false);
	    
 /*
  * MCA using the EVAMIX algorithm for spatially-explicit concordance metrics with
  * stakeholder prioritization
  */
 number mca_uhi_risk
  observing 
 	  @cost(value?=1) es.risk:HeatHazardMetric,
	  @cost(value?=1) es.risk:HeatExposureMetric,
	  @cost(value?=1) es.risk:HeatVulnerabilityMetric   
  using im.mca.concordance(levels = 10) 
  set to [1 - self ];
	    
@parameter(label = 'Risk threshold', default=0.5, name = risk_threshold)
project private model each earth:Location with im:Relevant es.risk:HeatRiskMetric
	"Hotspots are identified by clustering the total risk index whose value lies above a chosen threshold."
	observing es.risk:HeatRiskMetric named risk
	using     gis.points.cluster(select = [ risk > risk.max*3/5]);

	    